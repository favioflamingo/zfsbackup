#!/usr/bin/perl -wT
 use strict;
 use warnings;
 use Data::Dumper;
 use Crypt::CBC;
 use Digest::SHA qw(sha256_hex);



$ENV{'PATH'} = '/bin:/usr/bin:/sbin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

=pod

Usage: ./recover.pl /tmp/checksumfile /tmp/snapshotfile 


=cut

sub get_options {
	my @args = @_;
	my $data = {};
	die " no clear text key and checksum file" unless -f $args[0];
	if($args[0] =~ m/^(.*)$/){
		$data->{'checksumfile'} = $args[0];
	}
	die " no cipher text zfs snapshot" unless defined $args[1];
	if($args[1] =~ m/^(.*)$/){
		$data->{'snapshotfile'} = $args[1];
	}
	
	return $data;
}


sub extract_key_checksum {
	my $filepath = shift;
	open(my $fh, '<', $filepath ) || die "cannot open cleartext file";
	my $x = '';
	my $buf;
	my $n = 0;
	my $size = 0;
	$n = read($fh,$buf,4);
	$size = unpack('L',$buf);
	$n = read($fh,$buf,$size);
	die "bad size" unless $n == $size;
	my $checksum = $buf;
	
	$n = read($fh,$buf,4);
	$size = unpack('L',$buf);
	$n = read($fh,$buf,$size);
	die "bad size" unless $n == $size;
	my $key = $buf;
	
	close($fh);
	return ($checksum,$key);
}

sub get_symmetric_cipher{
	my $key = shift;
	return Crypt::CBC->new(-key => $key, -cipher => 'Blowfish');
}

# 
sub decrypt_full_backup{
	my $full_path = shift;
	my $checksum = shift;
	my $key = shift;
	my $cipher = get_symmetric_cipher($key);
	$cipher->start('decrypting');
	my $sha = Digest::SHA->new(256);
	my $buf;
	open(my $fh,'<',$full_path) || die "cannot open file";
	while(sysread($fh,$buf,8192)){
		$sha->add($buf);
		syswrite(STDOUT,$cipher->crypt($buf));
	}
	close($fh);
	syswrite(STDOUT,$cipher->finish());
		
}


#my ($checksum,$key) = extract_key_checksum('/tmp/unretard.txt');

#print STDERR "[".length($checksum).",".length($key)."]"



my $options = get_options(@ARGV);

#my $xo = Data::Dumper::Dumper($options);
#print STDERR $xo;

 ($options->{'checksum'},$options->{'key'}) = extract_key_checksum($options->{'checksumfile'});
my $xo = Data::Dumper::Dumper($options);
print STDERR $xo;

print STDERR "Now decrypting the full backup\n";
decrypt_full_backup($options->{'snapshotfile'},$options->{'checksum'},$options->{'key'});
